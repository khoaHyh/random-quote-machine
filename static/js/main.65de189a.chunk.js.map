{"version":3,"sources":["containers/App.js","reportWebVitals.js","index.js"],"names":["App","quoteVariable","useState","quote","setQuote","authorVariable","author","setAuthor","useEffect","generateRandomQuote","a","fetch","response","json","data","randomIndex","Math","round","random","length","text","console","log","className","id","href","target","rel","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6QA0FeA,EAtFH,WACV,IAAMC,EAAgBC,mBAAS,IAC3BC,EAAQF,EAAc,GACtBG,EAAWH,EAAc,GAEvBI,EAAiBH,mBAAS,IAC5BI,EAASD,EAAe,GACxBE,EAAYF,EAAe,GAE/BG,qBAAU,kBAAMC,MAAuB,IAEvC,IAAMA,EAAmB,uCAAG,gCAAAC,EAAA,sEAEZ,8BAFY,SAGDC,MADX,+BAFY,cAGlBC,EAHkB,gBAILA,EAASC,OAJJ,OAIlBC,EAJkB,OAKpBC,EAAcC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAKK,OAAS,IAC5Df,EAASU,EAAKC,GAAaK,MAC3Bb,EAAUO,EAAKC,GAAaT,QAPJ,kDASxBe,QAAQC,IAAR,wBATwB,0DAAH,qDAazB,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,IAAD,IACA,sBAAKC,GAAG,YAAR,UACE,qBAAKA,GAAG,OAAR,SAAgBrB,IAChB,qBAAKqB,GAAG,SAAR,SAAkBlB,IAClB,sBAAKiB,UAAU,UAAf,UACE,mBAAGC,GAAG,cAAcC,KAAK,mCAAmCC,OAAO,SAASC,IAAI,sBAAhF,yBACA,wBAAQH,GAAG,YAAYI,QAASnB,EAAhC,iCCxBKoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.65de189a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ReactFCCtest from \"react-fcctest\";\n\nconst App = () => {\n  const quoteVariable = useState('');\n  let quote = quoteVariable[0];\n  let setQuote = quoteVariable[1];\n\n  const authorVariable = useState('');\n  let author = authorVariable[0];\n  let setAuthor = authorVariable[1];\n\n  useEffect(() => generateRandomQuote(), []);\n\n  const generateRandomQuote = async() => {\n    try {\n      const url = \"https://type.fit/api/quotes\";\n      const response = await fetch(url);\n      const data = await response.json();\n      let randomIndex = Math.round(Math.random() * (data.length - 1));\n      setQuote(data[randomIndex].text);\n      setAuthor(data[randomIndex].author);\n    } catch(err) {\n      console.log(`error: ${err}`);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <ReactFCCtest />\n      <div id=\"quote-box\">\n        <div id=\"text\">{quote}</div>\n        <div id=\"author\">{author}</div>\n        <div className=\"buttons\">\n          <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\" target=\"_blank\" rel=\"noreferrer noopener\">Tweet Quote</a>\n          <button id=\"new-quote\" onClick={generateRandomQuote}>New Quote</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       quote: '',\n//       author: ''\n//     }\n//     this.generateRandomQuote = this.generateRandomQuote.bind(this);\n//   }\n\n//   async componentDidMount() {\n//     this.generateRandomQuote();\n//   }\n\n//   generateRandomQuote = async() => {\n//     try {\n//       const url = \"https://type.fit/api/quotes\";\n//       const response = await fetch(url);\n//       const data = await response.json();\n//       let randomIndex = Math.round(Math.random() * (data.length - 1));\n//       this.setState({\n//         quote: data[randomIndex].text,\n//         author: data[randomIndex].author\n//       });\n//     } catch(err) {\n//       console.log(`error: ${err}`);\n//     }\n//   }\n\n//   render() {\n//     const { quote, author } = this.state;\n//     return (\n//       <div className=\"App\">\n//         <ReactFCCtest />\n//         <div id=\"quote-box\">\n//           <div id=\"text\">{quote}</div>\n//           <div id=\"author\">{author}</div>\n//           <div className=\"buttons\">\n//             <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\" target=\"_blank\" rel=\"noreferrer noopener\">Tweet Quote button</a>\n//             <button id=\"new-quote\" onClick={this.generateRandomQuote}>New Quote</button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}