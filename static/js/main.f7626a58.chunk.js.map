{"version":3,"sources":["containers/App.js","reportWebVitals.js","index.js"],"names":["App","props","generateRandomQuote","a","fetch","response","json","data","randomIndex","Math","round","random","length","setState","quote","text","author","console","log","state","newQuote","bind","this","className","id","href","target","rel","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mTAoDeA,E,kDA/Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAaRC,oBAdmB,sBAcG,gCAAAC,EAAA,sEAEN,8BAFM,SAGKC,MADX,+BAFM,cAGZC,EAHY,gBAICA,EAASC,OAJV,OAIZC,EAJY,OAKdC,EAAcC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAKK,OAAS,IAC5D,EAAKC,SAAS,CACZC,MAAOP,EAAKC,GAAaO,KACzBC,OAAQT,EAAKC,GAAaQ,SARV,kDAWlBC,QAAQC,IAAR,wBAXkB,0DAZpB,EAAKC,MAAQ,CACXL,MAAO,GACPE,OAAQ,GACRI,UAAU,GAEZ,EAAKlB,oBAAsB,EAAKA,oBAAoBmB,KAAzB,gBAPV,E,0KAWjBC,KAAKpB,sB,qIAkBG,IAAD,EACmBoB,KAAKH,MAAvBL,EADD,EACCA,MAAOE,EADR,EACQA,OACf,OACE,sBAAKO,UAAU,MAAf,UACE,cAAC,IAAD,IACA,sBAAKC,GAAG,YAAR,UACE,qBAAKA,GAAG,OAAR,SAAgBV,IAChB,qBAAKU,GAAG,SAAR,SAAkBR,IAClB,sBAAKO,UAAU,UAAf,UACE,mBAAGC,GAAG,cAAcC,KAAK,mCAAmCC,OAAO,SAASC,IAAI,sBAAhF,gCACA,wBAAQH,GAAG,YAAYI,QAASN,KAAKpB,oBAArC,oC,GAxCM2B,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f7626a58.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ReactFCCtest from \"react-fcctest\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: '',\n      author: '',\n      newQuote: false\n    }\n    this.generateRandomQuote = this.generateRandomQuote.bind(this);\n  }\n\n  async componentDidMount() {\n    this.generateRandomQuote();\n  }\n\n  generateRandomQuote = async() => {\n    try {\n      const url = \"https://type.fit/api/quotes\";\n      const response = await fetch(url);\n      const data = await response.json();\n      let randomIndex = Math.round(Math.random() * (data.length - 1));\n      this.setState({\n        quote: data[randomIndex].text,\n        author: data[randomIndex].author\n      });\n    } catch(err) {\n      console.log(`error: ${err}`);\n    }\n  }\n\n  render() {\n    const { quote, author } = this.state;\n    return (\n      <div className=\"App\">\n        <ReactFCCtest />\n        <div id=\"quote-box\">\n          <div id=\"text\">{quote}</div>\n          <div id=\"author\">{author}</div>\n          <div className=\"buttons\">\n            <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\" target=\"_blank\" rel=\"noreferrer noopener\">Tweet Quote button</a>\n            <button id=\"new-quote\" onClick={this.generateRandomQuote}>New Quote</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}